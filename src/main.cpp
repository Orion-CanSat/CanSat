//-------------------------------------------------------------------------------------------------------------------------------------------------
// Generated by Make me a Makefile (https://github.com/Orion-CanSat/Make-me-a-Makefile)
//
// Board:            Teensy 4.1/Teensy 3.6
// CPU Speed:        600000000/256000000
// Optimization:     -O3
// 
// Time of creation: 2020/12/05 12:57
//-------------------------------------------------------------------------------------------------------------------------------------------------

#ifdef ARDUINO
    #include <Arduino.h>
    #include <SD.h>
#endif

#include <Orion/Orion.hpp>
#include <Orion/Data/Data.hpp>
#include <Orion/Data/Alitutde.hpp>
#include <Orion/Data/AngularVelocity.hpp>
#include <Orion/Data/GravitationalAcceleration.hpp>
#include <Orion/Data/Humidity.hpp>
#include <Orion/Data/Latitude.hpp>
#include <Orion/Data/LinearAcceleration.hpp>
#include <Orion/Data/LinearDisplacement.hpp>
#include <Orion/Data/LinearVelocity.hpp>
#include <Orion/Data/Longitude.hpp>
#include <Orion/Data/Magnetism.hpp>
#include <Orion/Data/Pressure.hpp>
#include <Orion/Data/RotationalAngle.hpp>
#include <Orion/Data/Temperature.hpp>
#include <Orion/Sensors/Sensor.hpp>
#include <Orion/Sensors/BME280.hpp>
#include <Orion/Sensors/BNO055.hpp>
#include <Orion/Sensors/TeensyChipTemperature.hpp>
#include <Orion/Sensors/GPS/Coordinates.hpp>
#include <Orion/Sensors/GPS/GPS.hpp>
#include <Orion/Sensors/GPS/MTK3339.hpp>
#include <Orion/Utilities/IO/TTY.hpp>

#include "Debug.hpp"
#include "main.hpp"


extern float tempmonGetTemp(void);

Orion::Sensors::Sensor* BME280 = NULL;
Orion::Sensors::Sensor* BNO055 = NULL;
Orion::Sensors::Sensor* MTK3339 = NULL;
Orion::Sensors::Sensor* TeensyChipTemperature = NULL;

Orion::Data::Data* Altitude = NULL;
Orion::Data::Data* Latitude = NULL;
Orion::Data::Data* Longitude = NULL;
Orion::Data::Data* EnvHumidity = NULL;
Orion::Data::Data* EnvPressure = NULL;
Orion::Data::Data* EnvTemperature = NULL;
Orion::Data::Data* ChipTemperature = NULL;


void InitializeBetelgeuse() {
    pinMode(28, OUTPUT);
    digitalWrite(28, HIGH);
    BME280 = new Orion::Sensors::BME280(__I2C__);
    if (BME280 && BME280->IsInitialized()) {
        Info("BME280: State: Init");
    }
    else {
        Error("BME280: State: Not Init");
    }

    pinMode(22, OUTPUT);
    digitalWrite(22, HIGH);
    BNO055 = new Orion::Sensors::BNO055(__I2C__);
    if (BNO055 && BNO055->IsInitialized()) {
        Info("BNO055: State: Init");
    }
    else {
        Error("BNO055: State: Not Init");
    }

    MTK3339 = new Orion::Sensors::GPS::MTK3339(&Serial3);
    if (MTK3339 && MTK3339->IsInitialized()) {
        Info("MTK3339: State: Init");
    }
    else {
        Error("MTK3339: State: Not Init");
    }

    TeensyChipTemperature = new Orion::Sensors::TeensyChipTemperature((uint8_t)10);
    if (TeensyChipTemperature && TeensyChipTemperature->IsInitialized()) {
        Info("TeensyChipTemperature: State: Init");
    }
    else {
        Error("TeensyChipTemperature: State: Not Init");
    }

    
    Altitude = new Orion::Data::Altitude(BME280);
    if (Altitude && Altitude->IsInitialized()) {
        Info("Altitude: State: Init");
    }
    else {
        Error("Altitude: State: Not Init");
    }

    Latitude = new Orion::Data::Latitude(MTK3339);
    if (Latitude && Latitude->IsInitialized()) {
        Info("Latitude: State: Init");
    }
    else {
        Error("Latitude: State: Not Init");
    }

    Longitude = new Orion::Data::Latitude(MTK3339);
    if (Longitude && Longitude->IsInitialized()) {
        Info("Longitude: State: Init");
    }
    else {
        Error("Longitude: State: Not Init");
    }

    EnvHumidity = new Orion::Data::Humidity(BME280);
    if (EnvHumidity && EnvHumidity->IsInitialized()) {
        Info("EnvHumidity: State: Init");
    }
    else {
        Error("EnvHumidity: State: Not Init");
    }

    EnvPressure = new Orion::Data::Pressure(BME280);
    if (EnvPressure && EnvPressure->IsInitialized()) {
        Info("EnvPressure: State: Init");
    }
    else {
        Error("EnvPressure: State: Not Init");
    }

    EnvTemperature = new Orion::Data::Temperature(BME280);
    if (EnvTemperature && EnvTemperature->IsInitialized()) {
        Info("EnvTemperature: State: Init");
    }
    else {
        Error("EnvTemperature: State: Not Init");
    }

    ChipTemperature = new Orion::Data::Temperature(TeensyChipTemperature);
    if (ChipTemperature && ChipTemperature->IsInitialized()) {
        Info("ChipTemperature: State: Init");
    }
    else {
        Error("ChipTemperature: State: Not Init");
    }
}

void UpdateBetelgeuse() {
    Debug("BME280: Update: Starting");
    if (BME280) {
        Debug("BME280: Update: On Wait");
        BME280->Update();
        Debug("BME280: Update: Success");
    }
    else {
        Error("BME280: Update: Failed");
    }
    Info("BME280: Update: Finished");


    Debug("BNO055: Update: Starting");
    if (BNO055) {
        Debug("BNO055: Update: On Wait");
        BNO055->Update();
        Debug("BNO055: Update: Success");
    }
    else {
        Error("BNO055: Update: Failed");
    }
    Info("BNO055: Update: Finished");

    Debug("MTK3339: Update: Starting");
    if (MTK3339) {
        Debug("MTK3339: Update: On Wait");
        MTK3339->Update();
        Debug("MTK3339: Update: Success");
    }
    else {
        Error("MTK3339: Update: Failed");
    }
    Info("MTK3339: Update: Finished");

    Debug("TeensyChipTemperature: Update: Starting");
    if (TeensyChipTemperature) {
        Debug("TeensyChipTemperature: Update: On Wait");
        TeensyChipTemperature->Update();
        Debug("TeensyChipTemperature: Update: Success");
    }
    else {
        Error("TeensyChipTemperature: Update: Failed");
    }
    Info("TeensyChipTemperature: Update: Finished");
}


int main(void)
{
    delay(1000);
    Serial.begin(9600);

    delay(4000);

    #if defined(__IMXRT1062__)
        Info("IMXRT1062: State: Init");
    #elif defined(__MK66FX1M0__)
        Info("MK66FX1M0: State: Init");
    #endif

    delay(1000);

    Info("Serial: State: Init");

    delay(1000);
    if (SD.begin(BUILTIN_SDCARD))
        Info("SD: State: Init");
    else
        Error("SD: State: Not Init");

    delay(1000);
    

    InitializeBetelgeuse();

    while (true)
    {
        Debug("Starting Update");
        UpdateBetelgeuse();
        Debug("Ending Update");

        float altitude = Altitude->Get();
        float envhumidity = EnvHumidity->Get();
        float envpressure = EnvPressure->Get();
        float envtemperature = EnvTemperature->Get();
        float chiptemperature = ChipTemperature->Get();
        float latitude = Latitude->Get();
        float longitude = Longitude->Get();

        orionout << altitude << " " << envhumidity << " " << envpressure << " " << envtemperature << " " << chiptemperature << " " << latitude << " " << longitude << Orion::Utilities::IO::endl;
        
        delay(1000);
        yield();
    }
}